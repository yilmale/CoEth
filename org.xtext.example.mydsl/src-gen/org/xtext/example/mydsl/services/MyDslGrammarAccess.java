/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CoEthDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CoEthDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoEthModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameIDTerminalRuleCall_1_0 = (RuleCall)cModelNameAssignment_1.eContents().get(0);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesAgentParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CoEthDSL:
		//	'CoEth Model' modelName=ID
		//	entities+=Agent* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'CoEth Model' modelName=ID entities+=Agent* 'end'
		public Group getGroup() { return cGroup; }
		
		//'CoEth Model'
		public Keyword getCoEthModelKeyword_0() { return cCoEthModelKeyword_0; }
		
		//modelName=ID
		public Assignment getModelNameAssignment_1() { return cModelNameAssignment_1; }
		
		//ID
		public RuleCall getModelNameIDTerminalRuleCall_1_0() { return cModelNameIDTerminalRuleCall_1_0; }
		
		//entities+=Agent*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }
		
		//Agent
		public RuleCall getEntitiesAgentParserRuleCall_2_0() { return cEntitiesAgentParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturesFeatureParserRuleCall_3_0 = (RuleCall)cFeaturesAssignment_3.eContents().get(0);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsActionParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		private final Keyword cEcoModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDecoNodesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDecoNodesEcoNodeParserRuleCall_7_0 = (RuleCall)cDecoNodesAssignment_7.eContents().get(0);
		private final Keyword cConstraintsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cConstraintsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cConstraintsEcoConstraintParserRuleCall_10_0 = (RuleCall)cConstraintsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Agent:
		//	'agent' name=ID '{'
		//	features+=Feature*
		//	operations+=Action*
		//	'ecoModel' '{'
		//	decoNodes+=ecoNode+
		//	'constraints' '{'
		//	constraints+=ecoConstraint+
		//	'}'
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'agent' name=ID '{' features+=Feature* operations+=Action* 'ecoModel' '{' decoNodes+=ecoNode+ 'constraints' '{'
		//constraints+=ecoConstraint+ '}' '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_3() { return cFeaturesAssignment_3; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_3_0() { return cFeaturesFeatureParserRuleCall_3_0; }
		
		//operations+=Action*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//Action
		public RuleCall getOperationsActionParserRuleCall_4_0() { return cOperationsActionParserRuleCall_4_0; }
		
		//'ecoModel'
		public Keyword getEcoModelKeyword_5() { return cEcoModelKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//decoNodes+=ecoNode+
		public Assignment getDecoNodesAssignment_7() { return cDecoNodesAssignment_7; }
		
		//ecoNode
		public RuleCall getDecoNodesEcoNodeParserRuleCall_7_0() { return cDecoNodesEcoNodeParserRuleCall_7_0; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_8() { return cConstraintsKeyword_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//constraints+=ecoConstraint+
		public Assignment getConstraintsAssignment_10() { return cConstraintsAssignment_10; }
		
		//ecoConstraint
		public RuleCall getConstraintsEcoConstraintParserRuleCall_10_0() { return cConstraintsEcoConstraintParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class EcoNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ecoNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNTypeNodeTypeEnumRuleCall_0_1_0 = (RuleCall)cNTypeAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cNDefinitionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNDefinitionSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cNDefinitionAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cInitialActivationKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cActivationLevelAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cActivationLevelDOUBLETerminalRuleCall_0_4_2_0 = (RuleCall)cActivationLevelAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cPriorityKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_5_1 = (Keyword)cGroup_0_5.eContents().get(1);
		private final Assignment cPriorityAssignment_0_5_2 = (Assignment)cGroup_0_5.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_0_5_2_0 = (RuleCall)cPriorityAssignment_0_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNTypeNodeTypeEnumRuleCall_1_1_0 = (RuleCall)cNTypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Keyword cIsKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cMyActionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cMyActionActionCrossReference_1_4_0 = (CrossReference)cMyActionAssignment_1_4.eContents().get(0);
		private final RuleCall cMyActionActionIDTerminalRuleCall_1_4_0_1 = (RuleCall)cMyActionActionCrossReference_1_4_0.eContents().get(1);
		private final Assignment cBDefinitionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cBDefinitionSTRINGTerminalRuleCall_1_5_0 = (RuleCall)cBDefinitionAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//ecoNode:
		//	'(' nType=NodeType name=ID nDefinition=STRING ('initial activation' '=' activationLevel=DOUBLE)? ('priority' '='
		//	priority=INT)? ')' | '(' nType=NodeType name=ID 'is' myAction=[Action] bDefinition=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' nType=NodeType name=ID nDefinition=STRING ('initial activation' '=' activationLevel=DOUBLE)? ('priority' '='
		//priority=INT)? ')' | '(' nType=NodeType name=ID 'is' myAction=[Action] bDefinition=STRING ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' nType=NodeType name=ID nDefinition=STRING ('initial activation' '=' activationLevel=DOUBLE)? ('priority' '='
		//priority=INT)? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//nType=NodeType
		public Assignment getNTypeAssignment_0_1() { return cNTypeAssignment_0_1; }
		
		//NodeType
		public RuleCall getNTypeNodeTypeEnumRuleCall_0_1_0() { return cNTypeNodeTypeEnumRuleCall_0_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//nDefinition=STRING
		public Assignment getNDefinitionAssignment_0_3() { return cNDefinitionAssignment_0_3; }
		
		//STRING
		public RuleCall getNDefinitionSTRINGTerminalRuleCall_0_3_0() { return cNDefinitionSTRINGTerminalRuleCall_0_3_0; }
		
		//('initial activation' '=' activationLevel=DOUBLE)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'initial activation'
		public Keyword getInitialActivationKeyword_0_4_0() { return cInitialActivationKeyword_0_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_4_1() { return cEqualsSignKeyword_0_4_1; }
		
		//activationLevel=DOUBLE
		public Assignment getActivationLevelAssignment_0_4_2() { return cActivationLevelAssignment_0_4_2; }
		
		//DOUBLE
		public RuleCall getActivationLevelDOUBLETerminalRuleCall_0_4_2_0() { return cActivationLevelDOUBLETerminalRuleCall_0_4_2_0; }
		
		//('priority' '=' priority=INT)?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'priority'
		public Keyword getPriorityKeyword_0_5_0() { return cPriorityKeyword_0_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_5_1() { return cEqualsSignKeyword_0_5_1; }
		
		//priority=INT
		public Assignment getPriorityAssignment_0_5_2() { return cPriorityAssignment_0_5_2; }
		
		//INT
		public RuleCall getPriorityINTTerminalRuleCall_0_5_2_0() { return cPriorityINTTerminalRuleCall_0_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//'(' nType=NodeType name=ID 'is' myAction=[Action] bDefinition=STRING ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//nType=NodeType
		public Assignment getNTypeAssignment_1_1() { return cNTypeAssignment_1_1; }
		
		//NodeType
		public RuleCall getNTypeNodeTypeEnumRuleCall_1_1_0() { return cNTypeNodeTypeEnumRuleCall_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//'is'
		public Keyword getIsKeyword_1_3() { return cIsKeyword_1_3; }
		
		//myAction=[Action]
		public Assignment getMyActionAssignment_1_4() { return cMyActionAssignment_1_4; }
		
		//[Action]
		public CrossReference getMyActionActionCrossReference_1_4_0() { return cMyActionActionCrossReference_1_4_0; }
		
		//ID
		public RuleCall getMyActionActionIDTerminalRuleCall_1_4_0_1() { return cMyActionActionIDTerminalRuleCall_1_4_0_1; }
		
		//bDefinition=STRING
		public Assignment getBDefinitionAssignment_1_5() { return cBDefinitionAssignment_1_5; }
		
		//STRING
		public RuleCall getBDefinitionSTRINGTerminalRuleCall_1_5_0() { return cBDefinitionSTRINGTerminalRuleCall_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDefinitionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cADefinitionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cADefinitionSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cADefinitionAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Action:
		//	'action' name=ID '{' ('definition' aDefinition=STRING)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID '{' ('definition' aDefinition=STRING) '}'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('definition' aDefinition=STRING)
		public Group getGroup_3() { return cGroup_3; }
		
		//'definition'
		public Keyword getDefinitionKeyword_3_0() { return cDefinitionKeyword_3_0; }
		
		//aDefinition=STRING
		public Assignment getADefinitionAssignment_3_1() { return cADefinitionAssignment_3_1; }
		
		//STRING
		public RuleCall getADefinitionSTRINGTerminalRuleCall_3_1_0() { return cADefinitionSTRINGTerminalRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EcoConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ecoConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cFacilitateParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTriggerParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cInhibitParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cIncompatibleParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cExplainParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cDeduceParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cContradictParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cSimilarParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cCompeteParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCooperativeUnitsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cCooperativeUnitsEcoNodeCrossReference_1_2_0 = (CrossReference)cCooperativeUnitsAssignment_1_2.eContents().get(0);
		private final RuleCall cCooperativeUnitsEcoNodeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cCooperativeUnitsEcoNodeCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ecoConstraint:
		//	(Facilitate | Trigger | Inhibit | Incompatible | Explain | Deduce | Contradict | Similar | Compete) ('with' '('
		//	cooperativeUnits+=[ecoNode]+ ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(Facilitate | Trigger | Inhibit | Incompatible | Explain | Deduce | Contradict | Similar | Compete) ('with' '('
		//cooperativeUnits+=[ecoNode]+ ')')?
		public Group getGroup() { return cGroup; }
		
		//(Facilitate | Trigger | Inhibit | Incompatible | Explain | Deduce | Contradict | Similar | Compete)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Facilitate
		public RuleCall getFacilitateParserRuleCall_0_0() { return cFacilitateParserRuleCall_0_0; }
		
		//Trigger
		public RuleCall getTriggerParserRuleCall_0_1() { return cTriggerParserRuleCall_0_1; }
		
		//Inhibit
		public RuleCall getInhibitParserRuleCall_0_2() { return cInhibitParserRuleCall_0_2; }
		
		//Incompatible
		public RuleCall getIncompatibleParserRuleCall_0_3() { return cIncompatibleParserRuleCall_0_3; }
		
		//Explain
		public RuleCall getExplainParserRuleCall_0_4() { return cExplainParserRuleCall_0_4; }
		
		//Deduce
		public RuleCall getDeduceParserRuleCall_0_5() { return cDeduceParserRuleCall_0_5; }
		
		//Contradict
		public RuleCall getContradictParserRuleCall_0_6() { return cContradictParserRuleCall_0_6; }
		
		//Similar
		public RuleCall getSimilarParserRuleCall_0_7() { return cSimilarParserRuleCall_0_7; }
		
		//Compete
		public RuleCall getCompeteParserRuleCall_0_8() { return cCompeteParserRuleCall_0_8; }
		
		//('with' '(' cooperativeUnits+=[ecoNode]+ ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'with'
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//cooperativeUnits+=[ecoNode]+
		public Assignment getCooperativeUnitsAssignment_1_2() { return cCooperativeUnitsAssignment_1_2; }
		
		//[ecoNode]
		public CrossReference getCooperativeUnitsEcoNodeCrossReference_1_2_0() { return cCooperativeUnitsEcoNodeCrossReference_1_2_0; }
		
		//ID
		public RuleCall getCooperativeUnitsEcoNodeIDTerminalRuleCall_1_2_0_1() { return cCooperativeUnitsEcoNodeIDTerminalRuleCall_1_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class FacilitateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Facilitate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFacilitateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Facilitate:
		//	'facilitate' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'facilitate' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'facilitate'
		public Keyword getFacilitateKeyword_0() { return cFacilitateKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Trigger:
		//	'trigger' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'trigger' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'trigger'
		public Keyword getTriggerKeyword_0() { return cTriggerKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class InhibitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Inhibit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInhibitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Inhibit:
		//	'inhibit' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'inhibit' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'inhibit'
		public Keyword getInhibitKeyword_0() { return cInhibitKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class IncompatibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Incompatible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncompatibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Incompatible:
		//	'incompatible' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'incompatible' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'incompatible'
		public Keyword getIncompatibleKeyword_0() { return cIncompatibleKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class ExplainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Explain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExplainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Explain:
		//	'explain' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'explain' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'explain'
		public Keyword getExplainKeyword_0() { return cExplainKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class DeduceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Deduce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Deduce:
		//	'deduce' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'deduce' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'deduce'
		public Keyword getDeduceKeyword_0() { return cDeduceKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class ContradictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Contradict");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContradictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Contradict:
		//	'contradict' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'contradict' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'contradict'
		public Keyword getContradictKeyword_0() { return cContradictKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class SimilarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Similar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimilarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Similar:
		//	'similar' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'similar' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'similar'
		public Keyword getSimilarKeyword_0() { return cSimilarKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class CompeteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Compete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompeteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceEcoNodeCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceEcoNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceEcoNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEcoNodeCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEcoNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetEcoNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cWeightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWeightDOUBLETerminalRuleCall_3_0 = (RuleCall)cWeightAssignment_3.eContents().get(0);
		
		//Compete:
		//	'compete' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
		@Override public ParserRule getRule() { return rule; }
		
		//'compete' source=[ecoNode] target=[ecoNode] weight=DOUBLE?
		public Group getGroup() { return cGroup; }
		
		//'compete'
		public Keyword getCompeteKeyword_0() { return cCompeteKeyword_0; }
		
		//source=[ecoNode]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ecoNode]
		public CrossReference getSourceEcoNodeCrossReference_1_0() { return cSourceEcoNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceEcoNodeIDTerminalRuleCall_1_0_1() { return cSourceEcoNodeIDTerminalRuleCall_1_0_1; }
		
		//target=[ecoNode]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[ecoNode]
		public CrossReference getTargetEcoNodeCrossReference_2_0() { return cTargetEcoNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getTargetEcoNodeIDTerminalRuleCall_2_0_1() { return cTargetEcoNodeIDTerminalRuleCall_2_0_1; }
		
		//weight=DOUBLE?
		public Assignment getWeightAssignment_3() { return cWeightAssignment_3; }
		
		//DOUBLE
		public RuleCall getWeightDOUBLETerminalRuleCall_3_0() { return cWeightDOUBLETerminalRuleCall_3_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Feature:
		//	name=ID ':' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
	}
	
	public class NodeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NodeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGOALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGOALGoalKeyword_0_0 = (Keyword)cGOALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBELIEFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBELIEFBeliefKeyword_1_0 = (Keyword)cBELIEFEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEVIDENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEVIDENCEEvidenceKeyword_2_0 = (Keyword)cEVIDENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cACTIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cACTIONActionKeyword_3_0 = (Keyword)cACTIONEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum NodeType:
		//	GOAL='goal' | BELIEF='belief' | EVIDENCE='evidence' | ACTION='action';
		public EnumRule getRule() { return rule; }
		
		//GOAL='goal' | BELIEF='belief' | EVIDENCE='evidence' | ACTION='action'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GOAL='goal'
		public EnumLiteralDeclaration getGOALEnumLiteralDeclaration_0() { return cGOALEnumLiteralDeclaration_0; }
		
		//'goal'
		public Keyword getGOALGoalKeyword_0_0() { return cGOALGoalKeyword_0_0; }
		
		//BELIEF='belief'
		public EnumLiteralDeclaration getBELIEFEnumLiteralDeclaration_1() { return cBELIEFEnumLiteralDeclaration_1; }
		
		//'belief'
		public Keyword getBELIEFBeliefKeyword_1_0() { return cBELIEFBeliefKeyword_1_0; }
		
		//EVIDENCE='evidence'
		public EnumLiteralDeclaration getEVIDENCEEnumLiteralDeclaration_2() { return cEVIDENCEEnumLiteralDeclaration_2; }
		
		//'evidence'
		public Keyword getEVIDENCEEvidenceKeyword_2_0() { return cEVIDENCEEvidenceKeyword_2_0; }
		
		//ACTION='action'
		public EnumLiteralDeclaration getACTIONEnumLiteralDeclaration_3() { return cACTIONEnumLiteralDeclaration_3; }
		
		//'action'
		public Keyword getACTIONActionKeyword_3_0() { return cACTIONActionKeyword_3_0; }
	}
	
	private final CoEthDSLElements pCoEthDSL;
	private final AgentElements pAgent;
	private final NodeTypeElements eNodeType;
	private final EcoNodeElements pEcoNode;
	private final ActionElements pAction;
	private final EcoConstraintElements pEcoConstraint;
	private final FacilitateElements pFacilitate;
	private final TriggerElements pTrigger;
	private final InhibitElements pInhibit;
	private final IncompatibleElements pIncompatible;
	private final ExplainElements pExplain;
	private final DeduceElements pDeduce;
	private final ContradictElements pContradict;
	private final SimilarElements pSimilar;
	private final CompeteElements pCompete;
	private final FeatureElements pFeature;
	private final TerminalRule tDOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCoEthDSL = new CoEthDSLElements();
		this.pAgent = new AgentElements();
		this.eNodeType = new NodeTypeElements();
		this.pEcoNode = new EcoNodeElements();
		this.pAction = new ActionElements();
		this.pEcoConstraint = new EcoConstraintElements();
		this.pFacilitate = new FacilitateElements();
		this.pTrigger = new TriggerElements();
		this.pInhibit = new InhibitElements();
		this.pIncompatible = new IncompatibleElements();
		this.pExplain = new ExplainElements();
		this.pDeduce = new DeduceElements();
		this.pContradict = new ContradictElements();
		this.pSimilar = new SimilarElements();
		this.pCompete = new CompeteElements();
		this.pFeature = new FeatureElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CoEthDSL:
	//	'CoEth Model' modelName=ID
	//	entities+=Agent* 'end';
	public CoEthDSLElements getCoEthDSLAccess() {
		return pCoEthDSL;
	}
	
	public ParserRule getCoEthDSLRule() {
		return getCoEthDSLAccess().getRule();
	}
	
	//Agent:
	//	'agent' name=ID '{'
	//	features+=Feature*
	//	operations+=Action*
	//	'ecoModel' '{'
	//	decoNodes+=ecoNode+
	//	'constraints' '{'
	//	constraints+=ecoConstraint+
	//	'}'
	//	'}'
	//	'}';
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//enum NodeType:
	//	GOAL='goal' | BELIEF='belief' | EVIDENCE='evidence' | ACTION='action';
	public NodeTypeElements getNodeTypeAccess() {
		return eNodeType;
	}
	
	public EnumRule getNodeTypeRule() {
		return getNodeTypeAccess().getRule();
	}
	
	//ecoNode:
	//	'(' nType=NodeType name=ID nDefinition=STRING ('initial activation' '=' activationLevel=DOUBLE)? ('priority' '='
	//	priority=INT)? ')' | '(' nType=NodeType name=ID 'is' myAction=[Action] bDefinition=STRING ')';
	public EcoNodeElements getEcoNodeAccess() {
		return pEcoNode;
	}
	
	public ParserRule getEcoNodeRule() {
		return getEcoNodeAccess().getRule();
	}
	
	//Action:
	//	'action' name=ID '{' ('definition' aDefinition=STRING)
	//	'}';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//ecoConstraint:
	//	(Facilitate | Trigger | Inhibit | Incompatible | Explain | Deduce | Contradict | Similar | Compete) ('with' '('
	//	cooperativeUnits+=[ecoNode]+ ')')?;
	public EcoConstraintElements getEcoConstraintAccess() {
		return pEcoConstraint;
	}
	
	public ParserRule getEcoConstraintRule() {
		return getEcoConstraintAccess().getRule();
	}
	
	//Facilitate:
	//	'facilitate' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public FacilitateElements getFacilitateAccess() {
		return pFacilitate;
	}
	
	public ParserRule getFacilitateRule() {
		return getFacilitateAccess().getRule();
	}
	
	//Trigger:
	//	'trigger' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//Inhibit:
	//	'inhibit' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public InhibitElements getInhibitAccess() {
		return pInhibit;
	}
	
	public ParserRule getInhibitRule() {
		return getInhibitAccess().getRule();
	}
	
	//Incompatible:
	//	'incompatible' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public IncompatibleElements getIncompatibleAccess() {
		return pIncompatible;
	}
	
	public ParserRule getIncompatibleRule() {
		return getIncompatibleAccess().getRule();
	}
	
	//Explain:
	//	'explain' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public ExplainElements getExplainAccess() {
		return pExplain;
	}
	
	public ParserRule getExplainRule() {
		return getExplainAccess().getRule();
	}
	
	//Deduce:
	//	'deduce' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public DeduceElements getDeduceAccess() {
		return pDeduce;
	}
	
	public ParserRule getDeduceRule() {
		return getDeduceAccess().getRule();
	}
	
	//Contradict:
	//	'contradict' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public ContradictElements getContradictAccess() {
		return pContradict;
	}
	
	public ParserRule getContradictRule() {
		return getContradictAccess().getRule();
	}
	
	//Similar:
	//	'similar' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public SimilarElements getSimilarAccess() {
		return pSimilar;
	}
	
	public ParserRule getSimilarRule() {
		return getSimilarAccess().getRule();
	}
	
	//Compete:
	//	'compete' source=[ecoNode] target=[ecoNode] weight=DOUBLE?;
	public CompeteElements getCompeteAccess() {
		return pCompete;
	}
	
	public ParserRule getCompeteRule() {
		return getCompeteAccess().getRule();
	}
	
	//Feature:
	//	name=ID ':' type=ID;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//terminal DOUBLE:
	//	INT '.' INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
