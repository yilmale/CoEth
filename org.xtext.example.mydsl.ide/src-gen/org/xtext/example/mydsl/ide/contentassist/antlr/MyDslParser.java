/*
 * generated by Xtext 2.9.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEcoNodeAccess().getAlternatives(), "rule__EcoNode__Alternatives");
					put(grammarAccess.getEcoConstraintAccess().getAlternatives_0(), "rule__EcoConstraint__Alternatives_0");
					put(grammarAccess.getNodeTypeAccess().getAlternatives(), "rule__NodeType__Alternatives");
					put(grammarAccess.getCoEthDSLAccess().getGroup(), "rule__CoEthDSL__Group__0");
					put(grammarAccess.getAgentAccess().getGroup(), "rule__Agent__Group__0");
					put(grammarAccess.getEcoNodeAccess().getGroup_0(), "rule__EcoNode__Group_0__0");
					put(grammarAccess.getEcoNodeAccess().getGroup_0_4(), "rule__EcoNode__Group_0_4__0");
					put(grammarAccess.getEcoNodeAccess().getGroup_0_5(), "rule__EcoNode__Group_0_5__0");
					put(grammarAccess.getEcoNodeAccess().getGroup_1(), "rule__EcoNode__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_3(), "rule__Action__Group_3__0");
					put(grammarAccess.getEcoConstraintAccess().getGroup(), "rule__EcoConstraint__Group__0");
					put(grammarAccess.getEcoConstraintAccess().getGroup_1(), "rule__EcoConstraint__Group_1__0");
					put(grammarAccess.getFacilitateAccess().getGroup(), "rule__Facilitate__Group__0");
					put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
					put(grammarAccess.getInhibitAccess().getGroup(), "rule__Inhibit__Group__0");
					put(grammarAccess.getIncompatibleAccess().getGroup(), "rule__Incompatible__Group__0");
					put(grammarAccess.getExplainAccess().getGroup(), "rule__Explain__Group__0");
					put(grammarAccess.getDeduceAccess().getGroup(), "rule__Deduce__Group__0");
					put(grammarAccess.getContradictAccess().getGroup(), "rule__Contradict__Group__0");
					put(grammarAccess.getSimilarAccess().getGroup(), "rule__Similar__Group__0");
					put(grammarAccess.getCompeteAccess().getGroup(), "rule__Compete__Group__0");
					put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
					put(grammarAccess.getCoEthDSLAccess().getModelNameAssignment_1(), "rule__CoEthDSL__ModelNameAssignment_1");
					put(grammarAccess.getCoEthDSLAccess().getEntitiesAssignment_2(), "rule__CoEthDSL__EntitiesAssignment_2");
					put(grammarAccess.getAgentAccess().getNameAssignment_1(), "rule__Agent__NameAssignment_1");
					put(grammarAccess.getAgentAccess().getFeaturesAssignment_3(), "rule__Agent__FeaturesAssignment_3");
					put(grammarAccess.getAgentAccess().getOperationsAssignment_4(), "rule__Agent__OperationsAssignment_4");
					put(grammarAccess.getAgentAccess().getDecoNodesAssignment_7(), "rule__Agent__DecoNodesAssignment_7");
					put(grammarAccess.getAgentAccess().getConstraintsAssignment_10(), "rule__Agent__ConstraintsAssignment_10");
					put(grammarAccess.getEcoNodeAccess().getNTypeAssignment_0_1(), "rule__EcoNode__NTypeAssignment_0_1");
					put(grammarAccess.getEcoNodeAccess().getNameAssignment_0_2(), "rule__EcoNode__NameAssignment_0_2");
					put(grammarAccess.getEcoNodeAccess().getNDefinitionAssignment_0_3(), "rule__EcoNode__NDefinitionAssignment_0_3");
					put(grammarAccess.getEcoNodeAccess().getActivationLevelAssignment_0_4_2(), "rule__EcoNode__ActivationLevelAssignment_0_4_2");
					put(grammarAccess.getEcoNodeAccess().getPriorityAssignment_0_5_2(), "rule__EcoNode__PriorityAssignment_0_5_2");
					put(grammarAccess.getEcoNodeAccess().getNTypeAssignment_1_1(), "rule__EcoNode__NTypeAssignment_1_1");
					put(grammarAccess.getEcoNodeAccess().getNameAssignment_1_2(), "rule__EcoNode__NameAssignment_1_2");
					put(grammarAccess.getEcoNodeAccess().getMyActionAssignment_1_4(), "rule__EcoNode__MyActionAssignment_1_4");
					put(grammarAccess.getEcoNodeAccess().getBDefinitionAssignment_1_5(), "rule__EcoNode__BDefinitionAssignment_1_5");
					put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
					put(grammarAccess.getActionAccess().getADefinitionAssignment_3_1(), "rule__Action__ADefinitionAssignment_3_1");
					put(grammarAccess.getEcoConstraintAccess().getCooperativeUnitsAssignment_1_2(), "rule__EcoConstraint__CooperativeUnitsAssignment_1_2");
					put(grammarAccess.getFacilitateAccess().getSourceAssignment_1(), "rule__Facilitate__SourceAssignment_1");
					put(grammarAccess.getFacilitateAccess().getTargetAssignment_2(), "rule__Facilitate__TargetAssignment_2");
					put(grammarAccess.getFacilitateAccess().getWeightAssignment_3(), "rule__Facilitate__WeightAssignment_3");
					put(grammarAccess.getTriggerAccess().getSourceAssignment_1(), "rule__Trigger__SourceAssignment_1");
					put(grammarAccess.getTriggerAccess().getTargetAssignment_2(), "rule__Trigger__TargetAssignment_2");
					put(grammarAccess.getTriggerAccess().getWeightAssignment_3(), "rule__Trigger__WeightAssignment_3");
					put(grammarAccess.getInhibitAccess().getSourceAssignment_1(), "rule__Inhibit__SourceAssignment_1");
					put(grammarAccess.getInhibitAccess().getTargetAssignment_2(), "rule__Inhibit__TargetAssignment_2");
					put(grammarAccess.getInhibitAccess().getWeightAssignment_3(), "rule__Inhibit__WeightAssignment_3");
					put(grammarAccess.getIncompatibleAccess().getSourceAssignment_1(), "rule__Incompatible__SourceAssignment_1");
					put(grammarAccess.getIncompatibleAccess().getTargetAssignment_2(), "rule__Incompatible__TargetAssignment_2");
					put(grammarAccess.getIncompatibleAccess().getWeightAssignment_3(), "rule__Incompatible__WeightAssignment_3");
					put(grammarAccess.getExplainAccess().getSourceAssignment_1(), "rule__Explain__SourceAssignment_1");
					put(grammarAccess.getExplainAccess().getTargetAssignment_2(), "rule__Explain__TargetAssignment_2");
					put(grammarAccess.getExplainAccess().getWeightAssignment_3(), "rule__Explain__WeightAssignment_3");
					put(grammarAccess.getDeduceAccess().getSourceAssignment_1(), "rule__Deduce__SourceAssignment_1");
					put(grammarAccess.getDeduceAccess().getTargetAssignment_2(), "rule__Deduce__TargetAssignment_2");
					put(grammarAccess.getDeduceAccess().getWeightAssignment_3(), "rule__Deduce__WeightAssignment_3");
					put(grammarAccess.getContradictAccess().getSourceAssignment_1(), "rule__Contradict__SourceAssignment_1");
					put(grammarAccess.getContradictAccess().getTargetAssignment_2(), "rule__Contradict__TargetAssignment_2");
					put(grammarAccess.getContradictAccess().getWeightAssignment_3(), "rule__Contradict__WeightAssignment_3");
					put(grammarAccess.getSimilarAccess().getSourceAssignment_1(), "rule__Similar__SourceAssignment_1");
					put(grammarAccess.getSimilarAccess().getTargetAssignment_2(), "rule__Similar__TargetAssignment_2");
					put(grammarAccess.getSimilarAccess().getWeightAssignment_3(), "rule__Similar__WeightAssignment_3");
					put(grammarAccess.getCompeteAccess().getSourceAssignment_1(), "rule__Compete__SourceAssignment_1");
					put(grammarAccess.getCompeteAccess().getTargetAssignment_2(), "rule__Compete__TargetAssignment_2");
					put(grammarAccess.getCompeteAccess().getWeightAssignment_3(), "rule__Compete__WeightAssignment_3");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0(), "rule__Feature__NameAssignment_0");
					put(grammarAccess.getFeatureAccess().getTypeAssignment_2(), "rule__Feature__TypeAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleCoEthDSL();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
